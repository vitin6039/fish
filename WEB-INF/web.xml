<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_5.xsd"
    version="2.5">

  <description>
   WEB4J Example Application.
   Friends arrange regular Fish and Chips lunches 
   at restaurants in their neighborhood.
  </description>
  <display-name>Fish and Chips Club - WEB4J Example App</display-name>
  
  <!-- IMPORTANT : when getting started, you likely only want to configure the following items : -->
  <!-- MailServer -->
  <!-- Webmaster -->
  <!-- LoggingDirectory -->
  <!-- TroubleTicketMailingList -->
  <!-- DefaultUserTimeZone -->
  <!-- RedirectWelcomeFile -->
  
  <filter>
   <description>
     Monitors basic system performance.
     Average response time, maximum response time, and URL of page 
     having maximum response time. Saves these stats in memory only.
   </description>
   <display-name>Performance Monitor</display-name>
   <filter-name>PerformanceMonitor</filter-name>
   <filter-class>hirondelle.web4j.webmaster.PerformanceMonitor</filter-class>
   <init-param>
    <description>
      Number of minutes to collect performance statistics for each 'snapshot'. 
      Required value. Choose only one of these values : 10, 20, 30, 60.
    </description>
    <param-name>ExposureTime</param-name>
    <param-value>10</param-value>
   </init-param>
   <init-param>
    <description>
      The maximum number of PerformanceSnapshot records to retain in 
      recent performance history. Required value. Choose value 
      in range 1..1000. See hirondelle.web4j.webmaster.PerformanceSnapshot.
    </description>
    <param-name>NumPerformanceSnapshots</param-name>
    <param-value>144</param-value>
   </init-param>
  </filter>
  
  <filter>
   <description>
    Detects when session have no logged in user.
    Logs the occurence at SEVERE level.
   </description>
   <display-name>Suppress Unwanted Session</display-name>
   <filter-name>SuppressUnwantedSessions</filter-name>
   <filter-class>hirondelle.web4j.security.SuppressUnwantedSessions</filter-class>
  </filter>

  <filter>
   <description>Protects your application from CSRF attacks.</description>
   <display-name>CSRF Filter</display-name>
   <filter-name>CsrfFilter</filter-name>
   <filter-class>hirondelle.web4j.security.CsrfFilter</filter-class>
   <init-param>
      <description>
       Required. SqlId for an SQL  SELECT statement needed by WEB4J to defend against CSRF attacks.
       The statement takes one parameter: the user name.
       The statement returns a single value: the most-recently used form-source id. 
       See hirondelle.web4j.security for more information.
      </description>
      <param-name>FormSourceIdRead</param-name>
      <param-value>ACCESS_CONTROL.FETCH_FORM_SOURCE_ID</param-value>  
    </init-param>
    <init-param>
      <description>
       Required. SqlId for an SQL UPDATE statement needed by WEB4J to defend against CSRF attacks.
       The statement takes two parameters: the form-source id, and the user name (in that order).
       See hirondelle.web4j.security for more information.
      </description>
      <param-name>FormSourceIdWrite</param-name>
      <param-value>ACCESS_CONTROL.SAVE_FORM_SOURCE_ID</param-value>  
    </init-param>
  </filter>
  
  <filter>
   <description>
     Forms that include one or more file upload controls are not parsed by the Servlet API.
     This filter is applied to file upload requests.
     It wraps the request, allowing it to be used as a regular request, 'as if' it were parsed by the Servlet API.
   </description>
   <display-name>File Upload</display-name>
   <filter-name>FileUpload</filter-name>
   <filter-class>hirondelle.fish.exercise.fileupload.FileUploadFilter</filter-class>
  </filter>
  
  <!-- 
  Filter Mappings.
  The order of execution of Filters is IMPLICITLY controlled by 
  filter-mappings :
   1. the url-pattern style always comes before the servlet-name style
   2. within each style, the order of appearance of the filter-mapping tag
   (not of the filter tag itself!) controls the execution order.
   
  Note that url-pattern refers to both static content
  (served outside of a Controller) and dynamic content (served through a 
  Controller). The url-pattern of '/*' refers to all content in the given 
  context.
  -->
  
  <filter-mapping>
   <filter-name>SuppressUnwantedSessions</filter-name>
   <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <filter-mapping>
   <filter-name>FileUpload</filter-name>
   <url-pattern>/exercise/fileupload/*</url-pattern>
  </filter-mapping>
  
  <filter-mapping>
   <filter-name>PerformanceMonitor</filter-name>
   <servlet-name>Controller</servlet-name>
  </filter-mapping>
  
  <filter-mapping>
   <filter-name>CsrfFilter</filter-name>
   <servlet-name>Controller</servlet-name>
  </filter-mapping>

  <!-- Required by file upload tool. -->
  <listener>
    <listener-class>org.apache.commons.fileupload.servlet.FileCleanerCleanup</listener-class>
  </listener> 

  <servlet>
    <description>
      The single Controller for this application.
      Some JSPs are served directly by the web container through simple
      "pointing" to the resource, while others are processed through 
      this Controller.
    </description>
    <servlet-name>Controller</servlet-name>
    <servlet-class>hirondelle.web4j.Controller</servlet-class>
    <!-- Alternate Controller demonstrating alternate style of implementing multilingual apps. -->
    <!-- <servlet-class>hirondelle.fish.main.visit.CustomController</servlet-class> -->
    
    <!-- IMPORTANT : all of the following web4j init-params will -->
    <!-- take default values if omitted.  -->
    <!-- For example, if only data services of web4j are desired, then  -->
    <!-- many extraneous items can be safely omitted from web.xml. -->
    <!-- The default values are (usually) simply the ones used here. -->

    <init-param>
      <description>
       Email address of the application admin.
       If trouble tickets are emailed by web4j, they will be sent to this 
       address. If emails are sent by web4j to other parties, then 
       they will have this as the "from" address. 
       This email address must be in the same domain as the MailServerConfig
       below.
      </description>
      <param-name>Webmaster</param-name>
      <param-value>vitin6039@gmail.com</param-value> 
    </init-param>
    
    <init-param>
      <description>
         Controls how web4j will send emails on the application's behalf. 
         Used to send trouble-ticket emails.
         Name-value pairs of N properties to be used when connecting to the outgoing mail server. 
         Each name-value pair must appear on a separate line.
         Example :
            mail.host = smtp1.blah.net
            mail.smtp.port = 465
        If the special value "NONE" is supplied, then web4j will not send any emails. 
      </description>
      <param-name>MailServerConfig</param-name>
      <param-value>
        NONE
      </param-value> 
    </init-param>

    <init-param>
      <description>
        The user name and password for the outgoing mail server, separated by a pipe character '|'.
        If the special value "NONE" is supplied, then no credentials will be passed to the mail server (which, 
        in some cases, can still work).
      </description>
      <param-name>MailServerCredentials</param-name>
      <param-value>NONE</param-value> 
    </init-param>

    <init-param>
      <description>
       Example value : 'com.blah' - do not include any trailing dot.
       By default, the hirondelle.web4j.request.RequestParserImpl class will map 
       Action classes implicitly to a specific URI. This specific URI is constructed 
       from the Action class name, modified by *removing* this base package, and 
       by *adding* a '.do' suffix (or similar - see below). This init-param defines 
       the base package to be *removed* from the class name.
       
       Example : given the current settings in this example application, the class:
       hirondelle.fish.main.home.HomePageAction
       
       is implicitly mapped to the URI:
       /main/home/HomePageAction.do
       
       by removing 'hirondelle.fish.', and adding '.do' to the (slightly modified) result of Class.getName().
       
       Implicit mapping can always be overridden by specifying in the Action 
       a conventional field named URI_MAPPING, of the form:
       
       public static final String URI_MAPPING = "/main/Blah.do";
      </description>
      <param-name>ImplicitMappingRemoveBasePackage</param-name>
      <param-value>hirondelle.fish</param-value>
    </init-param>
    
    <init-param>
      <description>
        Location for logging file. 
        MUST END WITH a directory separator.
        Example :'C:\log\fish\'.
        If the directory does not exist, web4j will attempt to create it.
        Used by hirondelle.web4j.webmaster.LoggingConfigImpl. 
        Special value of 'NONE' will disable LoggingConfigImpl, such that it will not 
        perform any logging config in code.
      </description>
      <param-name>LoggingDirectory</param-name>
      <param-value>C:\log\fish\</param-value>
    </init-param>
    
    <init-param>
      <description>
       Logging levels for various loggers. 
       Used by hirondelle.web4j.webmaster.LoggingConfigImpl.
       Comma-separated list of items, in the same format as JDK logging.properties files :
          'com.wildebeest.myapp.level=INFO, hirondelle.web4j.level=FINE'.
       It is recommended to include 'hirondelle.web4j.level', to allow logging of items by web4j.
      </description>
      <param-name>LoggingLevels</param-name>
      <param-value> hirondelle.fish.level=FINE, hirondelle.web4j.level=FINE</param-value>
    </init-param>
    
    <!-- Example of an explicit specification of an implementation class. This style isn't necessary when conventional class names are used. -->
		<init-param>
		  <param-name>ImplementationFor.hirondelle.web4j.security.LoginTasks</param-name>
		  <param-value>hirondelle.fish.all.preferences.Login</param-value>
		  <description>
		    Web4j always requires an implementation of the LoginTasks interface.
		  </description>
		</init-param> 
		
    <init-param>
     <description>
       Comma-delimited list of one or more email addresses to be notified when 
       a problem occurs. If trouble tickets are emailed, they will be sent to these 
       addresses. 
     </description>
     <param-name>TroubleTicketMailingList</param-name>
     <param-value>BLAH@BLAH.COM, BLAH@BLAH.COM</param-value>
    </init-param>
   
    <init-param>
      <description>
        Time interval in minutes. Suggested value : 30.
        Trouble tickets are expected to be rare. It is possible, however, 
        that trouble tickets could be generated in large numbers in a 
        short period of time. For example, if the db connection is lost, 
        then a trouble ticket is generated with every request. This 
        parameter is used to throttle down the sending of such emails.
      </description>
      <param-name>MinimumIntervalBetweenTroubleTickets</param-name>
      <param-value>30</param-value>
    </init-param>

     <init-param>
      <description>
        Time interval in seconds. Suggested value : 20.
        If any request processed by the Controller takes more than 
        this number of seconds, then an email will be sent to the 
        configured Webmaster. The email will state the number of 
        milliseconds taken to process the request. Often, poor performance 
        is caused by degradation not in the web application, 
        but rather in the environment in which it is running.
      </description>
      <param-name>PoorPerformanceThreshold</param-name>
      <param-value>20</param-value>
    </init-param>
    
     <init-param>
      <description>
        Suggested value : 51200.
        Minimum value : 1000.
        Maximum size in bytes of HTTP requests carrying no uploaded files.
        If such a request has a total size in excess of this value, then it will 
        be discarded by WEB4J, and will not be made available to the application.
        This is intended only for requests whose unusually large size identify them 
        clearly as hack requests. 
      </description>
      <param-name>MaxHttpRequestSize</param-name>
      <param-value>51200</param-value> 
    </init-param>
    
     <init-param>
      <description>
        Suggested value : 1048576.
        Minimum value : 1000.
        Maximum size in bytes of HTTP requests carrying uploaded files.
        If such a request has a total size in excess of this value, then it will 
        be discarded by WEB4J, and will not be made available to the application.
        This is intended only for requests whose unusually large size identify them 
        clearly as hack requests. 
      </description>
      <param-name>MaxFileUploadRequestSize</param-name>
      <param-value>1048576</param-value> 
    </init-param>
    
     <init-param>
      <description>
        Suggested value : 51200.
        Minimum value : 1000.
        Maximum size in bytes of HTTP request parameter values.
        This maximum is applied as a hard validation by ApplicationFirewallImpl, 
        and only against RequestParameters created using the withLengthCheck(String) 
        factory method. This is meant as a kind of default sanity check on parameter values, 
        when no other (more stringent) means of performing hard validation is suitable.
      </description>
      <param-name>MaxRequestParamValueSize</param-name>
      <param-value>51200</param-value> 
    </init-param>
    
    <init-param>
      <description>
        Permitted values : ON and OFF.
        When ON, then the *default* implementation of ApplicationFirewall will 
        use the configured SpamDetector to check the values of all request parameters. 
        If spam is detected, then an *unpolished* response will result.
        See hirondelle.web4j.request.SpamDetector for more information.
      </description>
      <param-name>SpamDetectionInFirewall</param-name>
      <param-value>OFF</param-value>  
    </init-param>
    
    <init-param>
      <description>
        Permitted values : ON and OFF. 
        Default value: OFF.
        Controls the behavior of ApplicationFirewallImpl for file upload requests.
        When ON, then ApplicationFirewallImpl will treat file upload requests 
        the same as any other request, and will check request parameter values in the usual way.
        When OFF, then it will not perform such validation for file upload requests.
        
        The problem addressed here is that file upload requests are fundamentally different 
        from regular requests. In particular, access to request parameters is possible only if 
        the file upload request has been 'wrapped' in some way, such that request 
        parameters can be read in the usual way. This setting should be ON only if 
        such request wrapping has been performed. Otherwise, it should be OFF.
        See hirondelle.web4j.security.ApplicationFirewallImpl for more information.
      </description>
      <param-name>FullyValidateFileUploads</param-name>
      <param-value>ON</param-value>  
    </init-param>

    <init-param>
      <description>
        Permitted values : YES and NO.
        Default value : NO.
        Used by the *default* implementation of the ConvertParam interface.
        Allows using String to be used as a supported building block class.
        Using SafeText is preferable to using String, since it provides protection against
        Cross-Site Scripting attacks.
        See hirondelle.web4j.model.ConvertParamImpl for more information.
      </description>
      <param-name>AllowStringAsBuildingBlock</param-name>
      <param-value>YES</param-value>  
    </init-param>

    <init-param>  
      <description>
        Character encoding used in the application. 
        Default value is 'UTF-8'.
        This setting MUST match the character encoding used by the database.
        (Databases often use the term 'character set' for character encoding.)
        Character encodings define how bytes are translated into text.
        For more information, see http://www.javapractices.com/Topic206.cjp
        
        This setting will be used by the Controller to process requests and 
        responses. In addition, it will be used to create an application scope attribute 
        named 'web4j_key_for_character_encoding'. The Controller will set the encoding 
        of every response to this value. In the rare case where an override is 
        desired, a 'page' directive may be used in a JSP.
      </description>
      <param-name>CharacterEncoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>  
    
    <init-param>  
      <description>
        Default Locale used by the application. This setting allows independence 
        of the server's JRE default Locale, and of HTTP headers.
        See hirondelle.web4j.request.LocaleSource for information on how 
        a Locale is derived from an underlying request.
        Example values : en, fr.
        See also :
        java.util.Locale (for possible values of Locale identifiers)
        hirondelle.web4j.util.Util.buildLocale(String)
      </description>
      <param-name>DefaultLocale</param-name>
      <param-value>en</param-value> 
    </init-param>  
    
    <init-param>  
      <description>
        Default TimeZone used by the application. This setting allows independence 
        of the server's JRE default TimeZone, and of HTTP headers.
        See hirondelle.web4j.request.TimeZoneSource for information on how 
        a TimeZone is derived from an underlying request.
        Example values: America/Montreal, UTC.
        See also :
        java.util.TimeZone (for possible values of TimeZone identifiers)
        hirondelle.web4j.request.LocaleSource 
      </description>
      <param-name>DefaultUserTimeZone</param-name>
      <param-value>UTC</param-value> 
    </init-param>  
    
    <init-param>  
      <description>
        Example values : NONE, America/Montreal, UTC.
        See : java.util.TimeZone for possible values of TimeZone identifiers.
        Time zont hint passed to the the database driver, for all date columns encountered 
        by the WEB4J data layer. Overrides the JRE default time zone.
        See : PreparedStatement.setTimestamp(int, Timestamp, Calendar) and 
        ResultSet.getTimestamp(int, Calendar).
        The special value 'NONE' is used when the default JRE time zone suffices, or when 
        the database already stores time zone information in the desired manner.
      </description>
      <param-name>TimeZoneHint</param-name>
      <param-value>NONE</param-value> 
    </init-param>  
    
    <init-param>  
      <description> 
        Comma-separated list of names of decimal separator characters to be accepted during
        user input of numbers having a fractional part. 
        Permitted values : 'PERIOD', 'COMMA', 'PERIOD,COMMA'.
        Used for conversions to BigDecimal and Decimal values.
        This item is not affected by Locale.
      </description>
      <param-name>DecimalSeparator</param-name>
      <param-value>PERIOD</param-value>
    </init-param>  
    
    <init-param>  
      <description>
        Format for DISPLAY of BigDecimal and Decimal values in reports.
        See java.text.DecimalFormat for possible values.
        This pattern is non-localized. It is combined with 
        a Locale to produce a locale-sensitive format.
      </description>
      <param-name>BigDecimalDisplayFormat</param-name>
      <param-value>#,##0.00</param-value>
    </init-param>  
    
    <init-param>  
      <description>
        The text for presenting boolean 'true' values in a report.
        Example values : Yes, True, Oui.
        
        The HMTL spec states that form controls can appear outside of a form.
        It is often desirable to represent boolean items with checkboxes,
        outside of any form.
        
        Here, one may attempt to specify a checkbox, as in :
        &lt;input type='checkbox' name='blah' value='blah' checked readonly &gt;
        Another option is to use an IMG tag.
        
        Note that the c:out tag of the JSTL will need escapeXml set 
        to false, in order for such items to render as desired.
      </description>
      <param-name>BooleanTrueDisplayFormat</param-name>
      <param-value>
       <![CDATA[
         <input type='checkbox' name='true' value='true' checked readonly notab>
       ]]>
      </param-value>
    </init-param>  
    
    <init-param>  
      <description>
        The text for presenting boolean 'false' values in a report.
        Example values : No, False, Non.
        See BooleanTrueDisplayFormat for more information on this style.
      </description>
      <param-name>BooleanFalseDisplayFormat</param-name>
      <param-value>
        <![CDATA[
          <input type='checkbox' name='false' value='false' readonly notab>
        ]]>
      </param-value>
    </init-param>  
    
    <init-param>  
      <description>
        The text to display when an item has no value.
        Many browsers do not render empty TABLE cells very well.
        The CSS 'empty-cells' property is the recommended way of 
        controlling this behavior.
        As an alternative, this setting may be used to specify text 
        representing empty or null items in a report.
        Example values : '-', '...'
      </description>
      <param-name>EmptyOrNullDisplayFormat</param-name>
      <param-value>-</param-value>
    </init-param>  
    
    <init-param>  
      <description>
        The format for presenting integer quantities.
        
        See java.text.DecimalFormat for possible values.
        This pattern is non-localized. It is combined with the Locale setting 
        to produce a locale-sensitive format.
      </description>
      <param-name>IntegerDisplayFormat</param-name>
      <param-value>#,###</param-value>
    </init-param>  
    
    <init-param>  
      <description>
        Optional. 
        Any parameter which takes this value will be ignored, by having its 
        value replaced by an empty string, in hirondelle.web4j.request.RequestParser.
        
        Intended solely for SELECT tags, which show a list of items. 
        Even when no selection is made by the user, most browsers will 
        simply pass the first item in the SELECT as the parameter value. 
        If such behavior is undesired, then specify this parameter, 
        and put the IgnorableParamValue as the first item in the SELECT tag.
        
        Typically, one would place unusual characters in IgnorableParamValue, 
        to greatly reduce the likelihood of conflict with regular user input.
        
        You may specify an empty value as well, which corresponds to a blank
        initial value in the list.
        
        In a multilingual application, this must not contain translatable text.
        For example, '----' or an empty string would be an appropriate value for 
        a multilingual application.
      </description>
      <param-name>IgnorableParamValue</param-name>
      <param-value></param-value>
    </init-param>  
    
    <init-param>  
      <description>
        If true, then upon startup WEB4J will *attempt* to precompile SQL statements 
        appearing in the .sql file(s), by calling Connection.prepareStatement(String), and 
        detecting if an SQLException is thrown. Any detected errors are logged as SEVERE.
        
        It is important to note that some drivers/databases will NOT throw an 
        SQLException even when the text is syntactically invalid. (This can be 
        determined with a simple test.) Hence, this is always an "attempt" to precompile. 
        
        The idea here is to be defensive, and to attempt to detect errors as soon as possible.
        In addition, this service is very useful when porting an application to a new 
        database : one may start with the "old" statements, and begin by seeing if they 
        compile versus the "new" database. 
        Value : (true | false). Recommended value is 'true', unless certain the driver/database
        does not support precompilation in this manner. 
        See hirondelle.web4j.database.SqlId for more information.
      </description>
      <param-name>IsSQLPrecompilationAttempted</param-name>
      <param-value>true</param-value>
    </init-param>  
    
    <init-param>  
      <description>
        Upper limit on the number of rows to be returned by any 
        SELECT statement. Serves as a defensive safety measure, to help 
        avoid operations which may take an excessively long time.
        Set value to '0' to turn off this limit.
        This value is passed to java.sql.Statement.setMaxRows(int).
      </description>
      <param-name>MaxRows</param-name>
      <param-value>300</param-value>
    </init-param>  
    
    <init-param>  
      <description>
        Hint sent to JDBC driver regarding the number of rows to be returned 
        when more rows are needed. Applies only to SELECT statements.
        Set value to '0' to turn off this hint.
        This value is passed to java.sql.Statement.setFetchSize(int).
      </description>
      <param-name>FetchSize</param-name>
      <param-value>25</param-value>
    </init-param>  
    
    <init-param>  
      <description>
        Value : (true | false), ignores case.
        Indicates if the database and driver support the method
        Connection.prepareStatement(SqlText, Statement.RETURN_GENERATED_KEYS).
      </description>
      <param-name>HasAutoGeneratedKeys</param-name>
      <param-value>true</param-value> 
    </init-param>  
    
    <init-param>  
      <description>
        The integer error code(s) returned by SQLException.getErrorCode()
        when trying to add a duplicate record.
        If you wish to treat more than one error code as being related to 
        duplicate key constraints, you may specify a comma-delimited list of integers.
        If this error code is unknown for a given database, you may 
        determine its value by exercising the example application, and 
        deliberately causing the error to happen.
        When web4j detects these error codes, then it will throw a 
        DuplicateException, instead of a DAOException.
        Some example values (please confirm using your database documentation):
         Oracle : 1
         MySQL : 1062
         JavaDB: -1
      </description>
      <param-name>ErrorCodeForDuplicateKey</param-name>
      <param-value>1062</param-value>
    </init-param>  
    
    <init-param>  
      <description>
        The integer error code(s) returned by SQLException.getErrorCode()
        when a foreign key constraint fails.
        If you wish to treat more than one error code as being related to 
        foreign key constraints, you may specify a comma-delimited list of integers.
        If this error code is unknown for a given database, you may 
        determine its value by exercising the example application, and 
        deliberately causing the error to happen.
        When web4j detects these error codes, then it will throw a 
        ForeignKeyException, instead of a DAOException.
        Some example values (please confirm using your database documentation):
         MySQL : 1216,1217,1451,1452
         Oracle : 2291
         JavaDB: 23503
      </description>
      <param-name>ErrorCodeForForeignKey</param-name>
      <param-value>1216,1217,1451,1452</param-value>
    </init-param>  
    
    <init-param>  
      <description>
       The default transaction isolation level used for queries.
       The permitted values are :
       DATABASE_DEFAULT (recommended)
       SERIALIZABLE
       REPEATABLE_READ
       READ_COMMITTED 
       READ_UNCOMMITTED (not recommended !)
       For more information, see hirondelle.web4j.data.TxIsolationLevel, and
       java.sql.Connection. It is important to confirm support for 
       these levels with your database documentation.
      </description>
      <param-name>SqlFetcherDefaultTxIsolationLevel</param-name>
      <param-value>DATABASE_DEFAULT</param-value>
    </init-param>  
    
    <init-param>  
      <description>
       The default transaction isolation level used for edit operations.
       The permitted values are :
       DATABASE_DEFAULT (recommended)
       SERIALIZABLE 
       REPEATABLE_READ 
       READ_COMMITTED 
       READ_UNCOMMITTED (not recommended!)
       For more information, see hirondelle.web4j.database.TxIsolationLevel and 
       java.sql.Connection. It is important to confirm support for 
       these levels with your database documentation.
      </description>
      <param-name>SqlEditorDefaultTxIsolationLevel</param-name>
      <param-value>DATABASE_DEFAULT</param-value>
    </init-param>  

    <init-param>  
      <description>
        Default formats used when passing hirondelle.web4j.model.DateTime objects as 
        parameters to SQL statements. If a DateTime needs to be passed in a format which 
        is not specified here, simply format the DateTime as desired, and pass the result
        to the database as a fully formatted String, instead of a DateTime.
        Three formats must be specified here, corresponding to 3 common cases (in this order):
         - date only (year-month-day are present, but no other units)
         - time only (hour-minute-second are present, but no other units)
         - both date and time (all units are present)
       The format Strings are those defined by hirondelle.web4j.model.DateTime.
       The format Strings are separated by a ^ character.
      </description>
      <param-name>DateTimeFormatForPassingParamsToDb</param-name>
      <param-value>YYYY-MM-DD^hh:mm:ss^YYYY-MM-DD hh:mm:ss</param-value>
    </init-param>  

    <!-- 'ImplementationFor.XXX' items may be added here. -->
    <!-- These items represent an alternate way to explicitly configure the implementations of various interfaces. -->
    <!-- * See the WEB4J javadoc overview for important information regarding these items.* -->
    <!-- These items should be specified only if they are taking non-default values. -->
    <!-- An example entry : -->
    <!--
    <init-param>  
      <description>
       Package-qualified name of class describing simple, high level 
       information about this application. 
      </description>
      <param-name>ImplementationFor.hirondelle.web4j.ApplicationInfo</param-name>
      <param-value>com.xyz.MyAppInfo</param-value>
    </init-param>  
    ..etc...
    -->

    <!-- These connection strings are not used directly by WEB4J. Rather, they are used -->
    <!-- by the example app's implementation of the ConnectionSource interface. -->
    <!-- If your app needs to read web.xml upon startup, see StartupTasks.readConfig().  -->
    <init-param>  
      <param-name>DefaultDbConnectionString</param-name>
      <param-value>java:comp/env/jdbc/fish</param-value>
    </init-param>  
    <init-param>  
      <param-name>TranslationDbConnectionString</param-name>
      <param-value>java:comp/env/jdbc/fish_translation</param-value>
    </init-param>  
    <init-param>  
      <param-name>AccessControlDbConnectionString</param-name>
      <param-value>java:comp/env/jdbc/fish_access</param-value>
    </init-param>  

    <load-on-startup>5</load-on-startup>
    
  </servlet>
  
  <servlet>
    <description>Redirects directory requests to home page Action.</description>
    <servlet-name>RedirectWelcomeFile</servlet-name>
    <servlet-class>hirondelle.fish.util.WelcomeFileController</servlet-class>
    <init-param>  
      <description>The URL of the new location of the home page, as an Action.</description>
      <param-name>Destination</param-name>
      <param-value>http://localhost:8080/fish/main/home/HomePageAction.show</param-value>
    </init-param>  
  </servlet>

  <!-- These multiple Controller mappings are needed only if you use extensions to define operations, not parameters. -->
  <!-- Such a style eases implementing fine-grained security constraints, -->
  <!-- which depend on knowing operations with more precision than simply GET and POST. -->
  <servlet-mapping>
    <servlet-name>Controller</servlet-name>
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>
  
  <servlet-mapping>
    <servlet-name>Controller</servlet-name>
    <url-pattern>*.list</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>Controller</servlet-name>
    <url-pattern>*.fetchForChange</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>Controller</servlet-name>
    <url-pattern>*.change</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>Controller</servlet-name>
    <url-pattern>*.add</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>Controller</servlet-name>
    <url-pattern>*.delete</url-pattern>
  </servlet-mapping>
  
  <!--  <servlet-mapping>
    <servlet-name>Controller</servlet-name>
    <url-pattern>*.show</url-pattern>
  </servlet-mapping> -->
  <servlet-mapping>
    <servlet-name>Controller</servlet-name>
    <url-pattern>*.apply</url-pattern>
  </servlet-mapping>
  
  <servlet-mapping>
    <servlet-name>Controller</servlet-name>
    <url-pattern>*.show</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>Controller</servlet-name>
    <url-pattern>*.search</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>Controller</servlet-name>
    <url-pattern>*.rtf</url-pattern>
  </servlet-mapping>
  
  <servlet-mapping>
    <servlet-name>RedirectWelcomeFile</servlet-name>
    <url-pattern>/welcome</url-pattern>
  </servlet-mapping>
  
  <session-config>
    <session-timeout>15</session-timeout> <!-- minutes -->
  </session-config>
  
  <welcome-file-list>
    <welcome-file>welcome</welcome-file>
  </welcome-file-list>

  <!-- Failure modes -->
  <!-- Failed validation of data entered as part of normal operation: -->
  <!--     "return to sender", and display polished response, as part of normal operation. -->
  <!-- Unexpected problem encountered, such as a programming bug: -->
  <!--      log, send trouble ticket email to webmaster, display simple static page to user -->
  <!-- Unknown URL: -->
  <!--      display simple static page to user -->

  <!--  Error pages are always with respect to the WAR root, so should always have a leading slash.-->
  <!-- WARNING: if using a filter that wraps the response, the error-page fails when using a JSP. -->
  <!-- That is why some HTML pages are used here.  -->
  <error-page>
    <exception-type>javax.servlet.ServletException</exception-type>
     <location>/Error.html</location>
  </error-page>
  <error-page>
    <error-code>500</error-code> <!-- InternalServerError -->
     <location>/Error.html</location>
  </error-page>
  <error-page>
    <error-code>400</error-code> <!-- Bad Requests : hacks, bad bugs, spam. -->
     <location>/ErrorBadRequest.jsp</location>
  </error-page>
  <error-page>
    <error-code>403</error-code> <!-- Access Denied, Not Authorized. -->
     <location>/ErrorAccessDenied.jsp</location>
  </error-page>
  
  <!-- Logged problems, for bugs, lost db connection, etc.-->
  <error-page>
    <error-code>503</error-code> <!-- ServiceUnavailable -->
    <location>/Error.html</location>
  </error-page>
  
  <jsp-config>
  
    <jsp-property-group>
      <url-pattern>*.jsp</url-pattern>    
      <include-prelude>/WEB-INF/JspHeader.jspf</include-prelude>
    </jsp-property-group>
    
    <taglib>
      <taglib-uri>/web4j</taglib-uri>
      <taglib-location>/WEB-INF/tlds/web4j.tld</taglib-location>
    </taglib>
    <taglib>
      <taglib-uri>http://java.sun.com/jsp/jstl/core</taglib-uri>
      <taglib-location>/WEB-INF/tlds/c.tld</taglib-location>
    </taglib>
    <taglib>
      <taglib-uri>http://java.sun.com/jsp/jstl/fmt</taglib-uri>
      <taglib-location>/WEB-INF/tlds/fmt.tld</taglib-location>
    </taglib>
    <taglib>
      <taglib-uri>http://java.sun.com/jsp/jstl/functions</taglib-uri>
      <taglib-location>/WEB-INF/tlds/fn.tld</taglib-location>
    </taglib>
  </jsp-config>
  
  <!-- Accesses the connection pool provided by the web container. -->  
  <resource-ref>
   <description>DB Connection Pool For Main Application</description>
   <res-ref-name>jdbc/fish</res-ref-name>
   <res-type>javax.sql.DataSource</res-type>
   <res-auth>Container</res-auth> 
  </resource-ref>
  
  <resource-ref>
   <description>DB Connection Pool For Translation</description>
   <res-ref-name>jdbc/fish_translation</res-ref-name>
   <res-type>javax.sql.DataSource</res-type>
   <res-auth>Container</res-auth> 
  </resource-ref>

  <resource-ref>
   <description>DB Connection Pool For Access Control</description>
   <res-ref-name>jdbc/fish_access</res-ref-name>
   <res-type>javax.sql.DataSource</res-type>
   <res-auth>Container</res-auth> 
  </resource-ref>

  <security-constraint>
   <web-resource-collection>
    <web-resource-name>Common Utilities Module</web-resource-name>
    <url-pattern>/all/*</url-pattern>
   </web-resource-collection>
   <auth-constraint>
    <role-name>*</role-name>
   </auth-constraint>
  </security-constraint>
  
  <security-constraint>
   <web-resource-collection>
    <web-resource-name>Main Module</web-resource-name>
    <url-pattern>/main/*</url-pattern>
   </web-resource-collection>
   <auth-constraint>
    <role-name>user-general</role-name>
    <role-name>user-president</role-name>
   </auth-constraint>
  </security-constraint>
  
  <security-constraint>
   <web-resource-collection>
    <web-resource-name>Deleting Members</web-resource-name>
    <url-pattern>/main/member/MemberAction.delete</url-pattern>
   </web-resource-collection>
   <auth-constraint>
    <role-name>user-president</role-name>
   </auth-constraint>
  </security-constraint>
  
  <security-constraint>
   <web-resource-collection>
    <web-resource-name>Reports Module</web-resource-name>
    <url-pattern>/main/reports/*</url-pattern>
   </web-resource-collection>
   <auth-constraint>
    <role-name>user-president</role-name>
   </auth-constraint>
  </security-constraint>
  
  <security-constraint>
   <web-resource-collection>
    <web-resource-name>Translation Module</web-resource-name>
    <url-pattern>/translate/*</url-pattern>
   </web-resource-collection>
   <auth-constraint>
    <role-name>translator</role-name>
   </auth-constraint>
  </security-constraint>
  
  <security-constraint>
   <web-resource-collection>
    <web-resource-name>Webmaster Module</web-resource-name>
    <url-pattern>/webmaster/*</url-pattern>
   </web-resource-collection>
   <auth-constraint>
    <role-name>webmaster</role-name>
   </auth-constraint>
  </security-constraint>
  
  <security-constraint>
   <web-resource-collection>
    <web-resource-name>Exercise Module</web-resource-name>
    <url-pattern>/exercise/*</url-pattern>
   </web-resource-collection>
   <auth-constraint>
    <role-name>webmaster</role-name>
   </auth-constraint>
  </security-constraint>
  
  <security-constraint>
   <web-resource-collection>
    <web-resource-name>Access Control Module</web-resource-name>
    <url-pattern>/access/*</url-pattern>
   </web-resource-collection>
   <auth-constraint>
    <role-name>access-control</role-name>
   </auth-constraint>
  </security-constraint>
  
  <login-config>
   <auth-method>FORM</auth-method>
   <form-login-config>
    <form-login-page>/Login.jsp</form-login-page>
    <form-error-page>/Login.jsp?Retry=True</form-error-page>
   </form-login-config>
  </login-config>
 
  <security-role>
   <role-name>translator</role-name>
  </security-role>
  <security-role>
   <role-name>access-control</role-name>
  </security-role>
  <security-role>
   <role-name>webmaster</role-name>
  </security-role>
  <security-role>
   <role-name>user-president</role-name>
  </security-role>
  <security-role>
   <role-name>user-general</role-name>
  </security-role>
  
</web-app>
